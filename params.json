{
  "name": "TAUC",
  "tagline": "",
  "body": "##Welcome to TAUC\r\n\r\nTAUC is a toolset to generate test cases addressing software timeliness. The toolset has been developed by [Chunhui Wang](http://wwwen.uni.lu/snt/people/chunhui_wang), at the [SVV lab](http://www.svv.lu) of the [University of Luxembourg](http://wwwen.uni.lu).\r\n\r\nWhy TAUC?\r\n---\r\nExperiments prove TAUC can generate effective test suite addressing software timeliness requirement (up to 30% additional fault coverage than manually written test cases). TAUC spares software engineers from the burden of creating very detail test model in order to generate full executable timeliness test cases, when the design artefacts are available to use.\r\n \r\n<table>\r\n  <tr>\r\n    <th rowspan=\"2\"></th>\r\n    <th colspan=\"5\">Percentage of fault coverage by Test suite size (number of test cases)</th>\r\n  </tr>\r\n  <tr>\r\n    <td>25</td>\r\n    <td>50</td>\r\n    <td>75</td>\r\n    <td>100</td>\r\n    <td>122</td>\r\n  </tr>\r\n  <tr>\r\n    <td>TAUC</td>\r\n    <td>85%</td>\r\n    <td>88%</td>\r\n    <td>91%</td>\r\n    <td>91%</td>\r\n    <td>91%</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Random</td>\r\n    <td>7%</td>\r\n    <td>12%</td>\r\n    <td>22%</td>\r\n    <td>30%</td>\r\n    <td>40%</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Manual</td>\r\n    <td>-</td>\r\n    <td>-</td>\r\n    <td>-</td>\r\n    <td>-</td>\r\n    <td>60%</td>\r\n  </tr>\r\n</table>\r\n\r\nRequirements\r\n---\r\n* Mac OS X / Linux / Windows\r\n* Java 1.7+\r\n* [UPPAAL 4.1.19](http://www.uppaal.org)\r\n\r\nStructure of TAUC distribution\r\n---\r\n```\r\n.\r\n+-- Aritifacts\r\n|   +-- DomainModel       //Domain model for distributed example.\r\n|   +-- ModelTestGeneration //Timeliness test model for test generation.\r\n|   +-- ModelVerification  //Timeliness test model for verification.\r\n+-- TAUC\r\n|   +-- bin-Linux   //UPPAAL model checking server binary for Linux.\r\n|   +-- bin-MacOS   //UPPAAL model checking server binary for MacOS.\r\n|   +-- bin-Win32   //UPPAAL model checking server binary for Windows.\r\n|   +-- lib         //Library dependencies for executable jars.\r\n|   +-- taucGen.jar\r\n|   +-- muta.jar\r\n|   +-- vmodel.jar\r\n|   +-- verifier.jar\r\n|   +-- createVModel.sh\r\n```\r\nTAUC distribution includes a sanitized example models: [RUCM uses case](https://github.com/taucgen/taucgen.github.io/blob/master/examples/UseCase.md) and [domain model](https://github.com/taucgen/taucgen.github.io/blob/master/examples/DomainModel.pdf). \r\n\r\n**The executable jars can be classified into two categories:**\r\n\r\n#### Test Generation\r\nTAUC test generator - ***taucGen.jar***, which takes **Timeliness Test Model** (UPPAAL Model files embedded with *environment*, *scenario*, and *augmented timing requirements* automata) as inputs and generates Timeliness test suite.\r\n```batch\r\n~$ java -jar taucGen.jar \r\nusage: taucGen.jar\r\n -i <InputModels>         File/Folder contains Timeliness Model.\r\n -d <DomainModel>         Domain Model File.\r\n -o <PathForTestSuite>    Specify the path to save test suite.\r\n -t <PathForTrace>        Specify the path to save traces.\r\n -m <NumberOfIteration>   Specify number of Iteration.\r\n -n <SizeOfTestSuite>     Size of generated test suite.\r\n -r                       Random test generation strategy instead TAUC.\r\n -p                       Print test generation statistics.\r\n```\r\n#### Evaluation\r\nEvaluation Module contains several components: \r\n* Firstly ***muta.jar*** was used to automatically mutate Timeliness test model by a subset of mutation operators suggested in [1][2], which may impact timing requirements. This allow the generation of mutants that represent faulty implementations of system. \r\n\r\n```batch\r\n~$ java -jar muta.jar \r\nusage: muta.jar\r\n -f <ModelFile>      Timeliness model file to mutate.\r\n -m <MutaOps>        List of mutation operators.\r\n -o <PathForMutants> Specify the path to save generated mutants.\r\n -s <OffsetValue>    Required for widen|shift|restrict MutaOps.\r\n -t <TemplateName>   Specify the template to mutate.\r\n -c <ConfigFile>     Load configuration from config file.\r\n```\r\nMutaOps is a comma separated list and can be any combination of the following items: **WidenTimeGuardStrategy**, **ShiftTimeGuardStrategy**, **RestrictTimeGuardStrategy** and **SelfLoopStrategy**.\r\n\r\nConfiguration can be loaded from a config file instead of command-line arguments. Once config file is specified by *-c*, other command-line arguments will be ignored. Here is a example of [config file](https://raw.githubusercontent.com/taucgen/taucgen.github.io/master/TAUC/config.json).\r\n\r\n* Secondly, ***vmodels.jar*** translates generated test cases into sequential timed automata by following the approach described in [3], and embedded them into each generated mutants from the previous step. The generated models which composed by sequential timed automata (test cases) and mutated timeliness test model (faulty implementations) are called \"verification model\", *vmodel* for short. \r\n\r\n```batch\r\n~$ java -jar vmodel.jar\r\nusage: java -jar vmodel.jar\r\n -c <ClassPathOfTestCases>   Specify the class path of test cases.\r\n -i <Mutants>                File/Folder contains mutants.\r\n -o <PathForVModel>          Specify the path to save vmodels.\r\n```\r\nBy default, ***vmodels.jar*** execute and translate test cases dynamically by using Java Reflection, thus test case folder was required in command line argument. This also requires generated test cases have been compiled based on a adaptor library by the following command.\r\n```batch\r\n~$ javac -cp uppaal-test-adaptor.jar <PathOfTestCases>/*.java\r\n```\r\nFor convenience, please use the provided batch script *createVModel.sh*, which will first compile the test cases and then create VModels.\r\n```batch\r\n~$ createVModel.sh\r\nUsage: \r\n./createVModel.sh <PathOfTestCases> <Mutants> <PathForVModel>\r\n```\r\n* Finally, each vmodel file is verified by ***verifier.jar***, which verifies each test case from generated test suite against each mutant. A mutant was killed by the test suite when at least one test case failed.\r\n```batch\r\n~$ java -jar verifier.jar\r\nusage: verifier.jar\r\n -i <VModels>     VModel file/folder to verify.\r\n -p <TC-Prefix>   Prefix for the name of test case templates.\r\n -f               Fast verification(stop when first killed).\r\n -s               Print verification Statistics.\r\n```\r\nThe command-line arguments *-p* indicates the prefix for the name of test case templates. Conventionally, each test case was translated into a sequential timed automata and named as test0, test1, test2, ... etc. Thus, here the prefix is *\"test\"*.\r\n\r\n**IMPORTANT NOTES**:\r\n\r\nThe **lib** folder contains all the library dependencies, thus it should be placed under the same folder with executable jars. \r\n\r\nThe **bin-OS** folder contains UPPAAL binaries for different platforms, which are also required and should be placed under the same folder with executable jars.\r\n\r\n#### Support or Contact\r\nHaving trouble with TAUC? Please feel free to [contact support](mailto:chunhui.wang@uni.lu), we would like to help you sort it out.\r\n\r\n#### Reference\r\n[1] M. S. Aboutrab, M. Brockway, S. Counsell, and R. M. Hierons, “Testing real-time embedded systems using timed automata based approaches,” J. Syst. Softw., vol. 86, no. 5, pp. 1209–1223, May 2013.\r\n\r\n[2] B. K. Aichernig, F. Lorber, and D. Nicˇkovic ́, Time for Mutants — Model- Based Mutation Testing with Timed Automata. Berlin, Heidelberg: Springer Berlin Heidelberg, 2013, pp. 20–38.\r\n\r\n[3] A. Hessel, K. G. Larsen, B. Nielsen, P. Pettersson, and A. Skou, Time-Optimal Real-Time Test Case Generation Using Uppaal. Berlin, Heidelberg: Springer Berlin Heidelberg, 2004, pp. 114–130.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}