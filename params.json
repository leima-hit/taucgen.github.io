{
  "name": "TAUC",
  "tagline": "",
  "body": "##Welcome to TAUC\r\n\r\nTAUC is a toolset to generate test cases addressing software timeliness. The toolset has been developed by [Chunhui Wang](http://wwwen.uni.lu/snt/people/chunhui_wang), at the [SVV lab](http://www.svv.lu) of the [University of Luxembourg](http://wwwen.uni.lu).\r\n\r\nRequirements\r\n---\r\n* Mac OS X / Linux\r\n* Java 1.7+\r\n\r\nContent of the distribution\r\n---\r\nThe TAUC distribution contains two modules:\r\n\r\n#### TAUC test generater\r\nA executable jar file - *taucGen.jar*, which takes **Timeliness Test Model** (UPPAAL Model files embedded with *environment*, *scenario*, and *augmented timing requirements* automata) as inputs and generates Timeliness test suite.\r\n```batch\r\n~$ java -jar taucGen.jar \r\nusage: taucGen.jar\r\n -i <InputModels>         File/Folder contains Timeliness Model.\r\n -o <PathForTestSuite>     Specify the place to save test suite.\r\n -t <PathForTrace>        Specify the place to save traces.\r\n -m <NumberOfIteration>   Specify number of Iteration.\r\n -n <SizeOfTestSuite>     Size of generated test suite.\r\n -r                       Random test generation strategy instead TAUC.\r\n```\r\nThe **lib** folder contains all the dependencies, thus it should be placed under the same folder with taucGen.jar. Otherwise, use the following way to run:\r\n```batch\r\n~$ java -cp taucGen.jar:<PathForLib>/* org.snt.svv.tauc.testgen.Main\r\n```\r\nThe **bin-OS** folder contains UPPAAL binaries for different platforms, which are also required and should be placed under the same folder with taucGen.jar too. \r\n#### Evaluation\r\nEvaluation Module contains several components: \r\n* Firstly *muta.jar* was used to automatically mutate Timeliness test model by a subset of mutation operators suggested in [1][2], which may impact timing requirements. This allow the generation of mutants that represent faulty implementations of system. \r\n\r\n```batch\r\n~$ java -jar muta.jar \r\nusage: muta.jar\r\n -f <ModelFile>      Timeliness model file to mutate.\r\n -m <MutaOps>        List of mutation operators.\r\n -o <PathForMutants> Output path where store generated mutants.\r\n -s <OffsetValue>    Required for widen|shift|restrict MutaOps.\r\n -t <TemplateName>   Specify the template to mutate.\r\n -c <configFile>     Load configuration from config file.\r\n```\r\nMutaOps is a comma separated list and can be any combination of the following items: *WidenTimeGuardStrategy*, *ShiftTimeGuardStrategy*, *RestrictTimeGuardStrategy* and *SelfLoopStrategy*.\r\n\r\n* Secondly, *vmodels.jar* translates generated test cases into sequential timed automata by following the approach described in [3], and embedded them into each generated mutants from the previous step. The generated models which composed by sequential timed automata (test cases) and mutated timeliness test model (faulty implementations) are called \"verification model\", *vmodel* for short. \r\n\r\n* Finally, each vmodel file is verified by *verifier.jar*, which verifies each test case in test suite against each mutant. A mutant was killed by the test suite when at least one test case failed.\r\n\r\n\r\n#### Support or Contact\r\nHaving trouble with Pages? Check out our [documentation](https://help.github.com/pages) or [contact support](https://github.com/contact) and weâ€™ll help you sort it out.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}